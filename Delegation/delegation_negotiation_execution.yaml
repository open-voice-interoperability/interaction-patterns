openapi: 3.0.0
info:
  title: Delegation Negotiation
  version: 1.0.1
  description: Delegation Negotiation API
  termsOfService: LINKTBD https://www.openvoicenetwork.org/
  contact:
    name: TBD OVON Technical Commitee
    url: TBD https://www.openvoicenetwork.org/
    email: TBD support@example.com
  license:
    name: TBD Apache 2.0
    url: TBD http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: TBD http://api.openvoicenetwork.org/v1
    description: Optional server description, e.g. Main (production) server
  - url: TBD http://staging-api.openvoicenetwork.org/v1
    description: Optional server description, e.g. Internal staging server for testing
tags:
  - name: negotiation
    description: Methods used for negotiation
  - name: execution
    description: Methods used for connecting client with Assistant
paths:
  /check_liveness:
    get:
      tags:
        - negotiation
      summary: Checks if Assistant exists
      description: The method might not be necessary
      operationId: negotiateLiveness
      parameters:
        - name: URL
          in: query
          description: Address of Assistant B
          required: true
          schema:
            type: string
            exanmple: 140.150.0.1
      responses:
        '200':
          description: Assistant is live
  /check_available:
    get:
      tags:
        - negotiation
      summary: Checks if Assistant is available
      description: The method might need to be combined with check_liveness
      operationId: negotiateAvailable
      parameters:
        - name: URL
          in: query
          description: Address of Destination Assistant (Assistant B)
          required: true
          schema:
            type: string
            exanmple: 140.150.0.1
      responses:
        '200':
          description: Assistant is FREE (ready to work)
        '201':
          description: >-
            Assistant is asking to check availability again. Returns time when
            you can ask again
          required: true
          content:
            application/xml:
              schema:
                type: integer
                format: date-time
            application/json:
              schema:
                type: integer
                format: date-time
        '400':
          description: Assistant is UNAVAILABLE
  /establish_assistant_trust:
    get:
      tags:
        - negotiation
      summary: Asks to trust it
      description: >-
        The Calling Assistant (Assistant A) asks the Destination Assistant (Assistant B) to trust it
      operationId: negotiateAssistantTrust
      parameters:
        - name: Assistant Credentials
          in: query
          description: The credentials of the Calling Assistant (Assistant A).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Trusted
        '400':
          description: Not trusted
  /check_user_acceptable:
    get:
      tags:
        - negotiation
      summary: Asks Destination Assistant if is willing to talk to user
      description: >-
        The calling Assistant (Assistant A) asks the Destination Assistant (Assistant
        B) if it's willing to talk to the end user
      operationId: negotiateUserOkay
      parameters:
        - name: userInfo
          in: query
          description: The ID of the user
          required: true
          schema:
            type: string
      requestBody:
        description: user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User Acceptable
        '400':
          description: User will not be accepted
  /ask_can_handle_request:
    get:
      tags:
        - negotiation
      summary: Asks assistant if it can handle request
      description: >-
        The calling Assistant (Assistant A) asks the target Assistant (Assistant
        B) if it can response to request
      operationId: negotiateCanHandle
      parameters:
        - name: request
          in: query
          description: Query of user //request body is probably better for this
          required: true
          schema:
            type: string
      requestBody:
        description: user details
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/ConversationID'
                - $ref: '#/components/schemas/UserRequest'
                - $ref: '#/components/schemas/ConversationHistory'
                - $ref: '#/components/schemas/NegotiationType'
      responses:
        '200':
          description: Request Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationAssistantCredentials'
        '400':
          description: Request will not be accepted

  /prepare_client:
    get:
      tags:
        - execution
      summary: Assistant A sends info to client
      description: Assistant A informs Endpoint Client that Delegation will take place
      operationId: prepareClient
      parameters:
        - name: URL
          in: query
          description: Address of Endpoint Client
          required: true
          schema:
            type: string
            example: 145.150.0.1
          ### NOTE: The Assistant already has some way of communicating with  the Endpoint client, likely this step should be done via different method.
      requestBody:
        description: user details
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/DestinationAssistantCredentials'
                - $ref: '#/components/schemas/DestinationAssistantAddress'
                - $ref: '#/components/schemas/ConversationID'
      responses:
        '200':
          description: Success
        '400':
          description: Reject

  /client_connect_destination:
    get:
      tags:
        - execution
      summary: Client connects to Destination
      description: Endpoint Client connects to Destination Assistant
      operationId: connectDestination
### NOTE: The Endpoint client will connect to Destination Assistant in a native way. For illustration purposes only
      requestBody:
        description: user details
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/DestinationAssistantCredentials'
                - $ref: '#/components/schemas/DestinationAssistantAddress'
                - $ref: '#/components/schemas/ConversationID'
      responses:
        '200':
          description: Success
        '400':
          description: Reject

  /client_disconnect_calling:
    get:
      tags:
        - execution
      summary: Client disconnects from Calling Agent
      description: Endpoint Client can disconnect from the Calling Assistant (because it connected to Destination Agent)
      operationId: disconnectCalling
### NOTE: The Endpoint client will likely disconnect from to Calling Assistant in a native way. For illustration purposes only
      requestBody:
        description: 
        content:
          application/json:
            schema:
                - $ref: '#/components/schemas/CallingAssistantAddress'
      responses:
        '200':
          description: Successfully Disconnected
        '400':
          description: Reject

#### COMPONENTS #####
components:
  schemas:
### ELEMENTS RELATED TO USER ####
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: user
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    UserRequest:
      type: object
      properties:
        requestContent:
          type: string
          example: I want a banana
      xml:
        name: userRequest

### ELEMENTS RELATED TO CONVERSATION ####
    ConversationHistory:
      type: array
      example:
        - I want a banana
        - Let's look for a banana for you
      items:
        $ref: '#/components/schemas/UserRequest'
      xml:
        name: conversationHistory

    ConversationID:
      type: string
      example: ef0022321111
      xml:
        name: conversationID

### ELEMENTS RELATED TO NEGOTIATION ATTRIBUTES ####

    NegotiationType:
      type: string
      example: Delegation
      enum:
        - Delegation
        - Channelling
        - Mediation
      xml:
        name: negotiationType

### ELEMENTS RELATED TO CALLING ASSSISTANT ####
### probably makes sense to combine them into single object.
    CallingAssistantAddress:
      type: string
      description: Address of Assistant A
      example: 150.150.0.1
    CallingAssistantCredentials:
      type: string
      example: xxxxxxxxxxx
      xml:
        name: callingAssistantCredentials
      #### NOTE: NEEDS TO BE EXPLORED

### ELEMENTS RELATED TO DESTINATION ASSSISTANT ####
### probably makes sense to combine them into single object.
    DestinationAssistantAddress:
      type: string
      description: Address of Assistant B
      example: 150.150.0.1
    DestinationAssistantCredentials:
      type: string
      example: xxxxxxxxxxx
      xml:
        name: destinationAssistantCredentials
      #### NOTE: NEEDS TO BE EXPLORED
  
  ### SECURITY ####
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
